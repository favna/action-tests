name: testing

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  pre_ci:
    name: Prepare CI environment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Project
        uses: actions/checkout@v2
        with:
          fetch-depth: 2
      - name: '[Push] Get commit message'
        if: github.event_name == 'push'
        id: push_get_commit_message
        run: echo ::set-output name=push_commit_message::$(git log --format=%B -n 1 HEAD)
      - name: '[Pull Request] Get commit message'
        if: github.event_name == 'pull_request'
        id: pr_get_commit_message
        run: echo ::set-output name=pr_commit_message::$(git log --format=%B -n 1 HEAD^2)
      # - name: Resolve commit message
      #   id: get_commit_message
      #   run: echo ::set-output name=resolved_commit_message::$( [ -z "${{ steps.pr_get_commit_message.outputs.pr_commit_message }}" ] && echo ${{ steps.push_get_commit_message.outputs.push_commit_message }} || echo ${{ steps.pr_get_commit_message.outputs.pr_commit_message }} )
    outputs:
      commit_message: $( [ -z "${{ steps.pr_get_commit_message.outputs.pr_commit_message }}" ] && echo ${{ steps.push_get_commit_message.outputs.push_commit_message }} || echo ${{ steps.pr_get_commit_message.outputs.pr_commit_message }} )

  test:
    name: Testing GitHub Actions
    runs-on: ubuntu-latest
    if: "!contains(needs.pre_ci.outputs.commit_message, '[skip ci]')"
    needs: pre_ci
    steps:
      - name: Checkout Project
        uses: actions/checkout@v2
      - name: Get GitHub Branch Name
        id: get_branch_name
        run: echo ::set-output name=branch_name::$(echo $( [ -z "${{ github.head_ref }}" ] && echo ${{ github.ref }} | cut -c12- || echo ${{ github.head_ref }} ) | sed -e 's/\/\|_/-/g' | sed -e 's/@//g')
      - name: Log stored git Branch
        run: echo "${{ steps.get_branch_name.outputs.branch_name }}"
      - name: Log commit message
        run: echo "${{ needs.pre_ci.outputs.commit_message }}"
